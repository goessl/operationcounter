{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"operationcounter","text":"<p>operationcounter is a Python package for tracking arithmetic and comparison operations. It is designed to perform complexity analysis empirically and exactly.</p> <p>Unlike profilers (which measure time), <code>OperationCounter</code> counts operations like <code>add</code>, <code>iadd</code>, <code>lt</code>, <code>pow</code>, <code>divmod</code>, etc., giving you a cost model that is independent of machine speed.</p> <pre><code>&gt;&gt;&gt; from operationcounter import OperationCounter, count_ops\n&gt;&gt;&gt; a = OperationCounter(3)\n&gt;&gt;&gt; b = OperationCounter(5)\n&gt;&gt;&gt; c = a * b + 2\n&gt;&gt;&gt; if c &gt; 10:\n...     c -= 1\n... OperationCounter.counter\nCounter({'mul': 1, 'add': 1, 'gt': 1, 'isub': 1})\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>git clone https://github.com/goessl/operationcounter.git\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>A class <code>OperationCounter</code> that wraps any Python value and tracks:<ul> <li>Arithmetic operations: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>, <code>divmod</code></li> <li>Bitwise operations: <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li> <li>Unary operations: <code>+x</code>, <code>-x</code>, <code>abs(x)</code>, <code>~x</code></li> <li>Comparisons: <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&gt;=</code></li> </ul> </li> <li>Exact accumulators that don't perform any unnecessary operations like <code>+0</code> or   <code>*1</code> and allow for an initial and a default argument:<ul> <li><code>reduce_default</code>,</li> <li><code>sum_default</code>,</li> <li><code>prod_default</code> &amp;</li> <li><code>sumprod_default</code>.</li> </ul> </li> </ul>"},{"location":"#why-not-just-use-a-profiler","title":"Why not just use a profiler?","text":"<p>Profilers measure wall-clock time or CPU usage, which depends on machine, libraries, and optimizations resulting in machine dependent and noisy results. <code>OperationCounter</code> instead counts abstract operations separately - closer to what we use in algorithm analysis (e.g. \"merge sort does \\(\\mathcal{O}(n\\log n)\\) comparisons\").</p> <p>It also enables exact counting, so that not just a big-O result like \\(\\mathcal{O}(n^2)\\) can be given but rather \"this function does \\(n^2+3n+2\\) multiplications and \\(4n+1\\) additions\".</p>"},{"location":"#demonstration","title":"Demonstration","text":"<p>To verify that iterative polynomial evaluation takes \\(n\\) additions and \\(2n-1\\) multiplications. <pre><code>&gt;&gt;&gt; from itertools import accumulate, repeat\n&gt;&gt;&gt; from functools import reduce\n&gt;&gt;&gt; from operator import mul\n&gt;&gt;&gt; from operationcounter import OperationCounter, count_ops, sumprod_default\n&gt;&gt;&gt; \n&gt;&gt;&gt; def polyval_iterative(p, x):\n...     \"\"\"Return the polynomial `p` evaluated at point `x`.\n...     \n...     Uses iterative monomial calculation.\n...     \"\"\"\n...     #don't do\n...     #return sumprod(p, accumulate(repeat(x, len(p)-1), mul, initial=type(x)(1)))\n...     #as it would introduce two unnecessary multiplications and one addition:\n...     # one multiplication in accumulate: 1, 1*x, x*x, x^2*x, ...,\n...     # another one in sumprod: p[0]*1 + p[1]*x + p[2]*x^2 + ...\n...     # and an addition in sumprod: 0 + p[0] + p[1]x + ...\n...     monomials = (type(x)(1),) + tuple(accumulate(repeat(x, len(p)-1), mul))\n...     return sumprod_default(p[1:], monomials[1:], initial=p[0])\n...     \n&gt;&gt;&gt; p = [1, 2, 3] # 1+2x+3x^2\n&gt;&gt;&gt; x = 5\n&gt;&gt;&gt; \n&gt;&gt;&gt; p = tuple(map(OperationCounter, p))\n&gt;&gt;&gt; x = OperationCounter(x)\n&gt;&gt;&gt; \n&gt;&gt;&gt; with count_ops() as counts:\n...     assert polyval_iterative(p, x) == 86\n...     counts\n...     \nCounter({'mul': 3, 'add': 2, 'eq': 1})\n</code></pre></p>"},{"location":"#warning","title":"Warning","text":"<p>Special attention has to be paid to built-in functions like <code>sum</code>. It prepends an initial <code>+int(0)</code> (to correctly return the neutral element for an empty sum) and therefore increments the addition counter too.</p> <p>For such applications use the provided <code>reduce_default</code>, <code>sum_default</code>, <code>prod_default</code> &amp; <code>sumprod_default</code>.</p>"},{"location":"#limitations","title":"Limitations","text":"<ul> <li>Only counts operations performed through the wrapper.   If your algorithm manipulates raw <code>int</code> or <code>float</code>, those ops are invisible.</li> <li>Does not catch operations executed inside C extensions (e.g. <code>numpy.linalg</code>).</li> <li>Uses a global counter; multi-threaded code may need thread-local storage   (planned feature).</li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li> <code>reduce</code>, <code>sum</code>, <code>prod</code> &amp; <code>sumprod</code> with default argument.</li> <li> Accumulators as C extension.</li> <li> Log all operations with operands so that the binary complexity can be   determined.</li> <li> Threading.</li> <li> More flexible grouping schemes (choose your own families).</li> <li> Helper to wrap elements of sequences or <code>numpy.array</code>s.</li> </ul>"},{"location":"#license-mit","title":"License (MIT)","text":"<p>Copyright (c) 2025 Sebastian G\u00f6ssl</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"accumulators/","title":"Accumulators","text":"<pre><code>graph TD\n  Z([\"&lt;code&gt;sum(iterable, initial=initial, default=default)&lt;/code&gt;\"]) --&gt; A{\"&lt;code&gt;initial&lt;/code&gt; &lt;code&gt;MISSING&lt;/code&gt;?\"};\n  A --&gt; |no| B[\"&lt;code&gt;return initial+...&lt;/code&gt;\"];\n  A --&gt; |yes| C{\"&lt;code&gt;iterable&lt;/code&gt; empty?\"};\n  C --&gt; |no| D[\"&lt;code&gt;return iterable[0]+...&lt;/code&gt;\"];\n  C --&gt; |yes| E{\"&lt;code&gt;default&lt;/code&gt; &lt;code&gt;MISSING&lt;/code&gt;?\"};\n  E --&gt; |no| F[\"&lt;code&gt;return default&lt;/code&gt;\"];\n  E --&gt; |yes| G[\"&lt;code&gt;raise TypeError&lt;/code&gt;\"];</code></pre>"},{"location":"accumulators/#missing","title":"Missing","text":"<p><code>MISSING</code></p> <p>Sentinel to mark empty parameters.</p>"},{"location":"accumulators/#reduce","title":"reduce","text":"<p><code>reduce_default(function, iterable, *, initial=MISSING, default=0)</code></p> <p>Apply function of two arguments cumulatively to the iterable.</p> <p>Like <code>functools.reduce</code> but with an optional initial element and an optional default return value. Difference to <code>functools.reduce</code>:</p> <ul> <li>If <code>iterable</code> is empty and <code>initial</code> and <code>default</code> is <code>MISSING</code>, an   <code>TypeError</code> is raised.</li> <li>If <code>iterable</code> is empty and <code>initial</code> is <code>MISSING</code>, but <code>default</code> is not, then   <code>default</code> is returned.</li> </ul>"},{"location":"accumulators/#sum","title":"sum","text":"<p><code>def sum_default(iterable, *, initial=MISSING, default=0)</code></p> <p>Return the sum of all elements in the iterable.</p> <p>Like <code>sum</code> but with an optional initial element and an optional default return value.</p> <ul> <li>If <code>iterable</code> is empty and <code>initial</code> and <code>default</code> is <code>MISSING</code>, an   <code>TypeError</code> is raised.</li> <li>If <code>iterable</code> is empty and <code>initial</code> is <code>MISSING</code>, but <code>default</code> is not, then   <code>default</code> is returned.</li> <li>If <code>initial</code> is <code>MISSING</code>, then there is truly no initial <code>0 +=</code>.</li> </ul>"},{"location":"accumulators/#prod","title":"prod","text":"<p><code>prod_default(iterable, *, initial=MISSING, default=1)</code></p> <p>Return the product of all elements in the iterable.</p> <p>Like <code>math.prod</code> but with an optional initial element and an optional default return value.</p> <ul> <li>If <code>iterable</code> is empty and <code>initial</code> and <code>default</code> is <code>MISSING</code>, an   <code>TypeError</code> is raised.</li> <li>If <code>iterable</code> is empty and <code>initial</code> is <code>MISSING</code>, but <code>default</code> is not,   then <code>default</code> is returned.</li> <li>If <code>initial</code> is <code>MISSING</code>, then there is truly no initial <code>1 *=</code>.</li> </ul>"},{"location":"accumulators/#sumprod","title":"sumprod","text":"<p><code>sumprod_default(a, b, *, initial=MISSING, default=0)</code></p> <p>Return the sum-product of all elements in the iterables.</p> <p>Like <code>math.sumprod</code> but with an optional initial element, an optional default return value and non-strict zipping of both iterables.</p> <ul> <li>If <code>a</code> or <code>b</code> is empty and <code>initial</code> and <code>default</code> is <code>MISSING</code>, an   <code>TypeError</code> is raised.</li> <li>If <code>a</code> or <code>b</code> is empty and <code>initial</code> is <code>MISSING</code>, but <code>default</code> is not,   then <code>default</code> is returned.</li> <li>If <code>initial</code> is <code>MISSING</code>, then there is truly no initial <code>0 +=</code>.</li> </ul>"},{"location":"accumulators/#default","title":"default","text":"<p>No, <code>default</code> isn't a Python keyword.</p>"},{"location":"operationcounter/","title":"OperationCounter &amp; count_ops","text":""},{"location":"operationcounter/#class-operationcountert","title":"Class: <code>OperationCounter[T]</code>","text":"<p>Wrap a value and count the operations performed on it. All arithmetic, bitwise, and comparison operations are intercepted and counted.</p>"},{"location":"operationcounter/#attributes","title":"Attributes","text":"<ul> <li> <p><code>counter: Counter[str]</code>:</p> <p>Live global counter of all operations.</p> </li> </ul>"},{"location":"operationcounter/#static-methods","title":"Static methods","text":"<ul> <li> <p><code>reset() -&gt; None</code>:</p> <p>Clear all recorded operation counts.</p> </li> <li> <p><code>snapshot() -&gt; Counter[str]</code>:</p> <p>Return a copy of the current operation counts.</p> </li> <li> <p><code>unwrap(x: OperationCounter[T] | T) -&gt; T</code>:</p> <p>Extract the underlying value if <code>x</code> is an <code>OperationCounter</code>.</p> </li> <li> <p><code>grouped(counter: Counter[str]) -&gt; Counter[str]</code>:</p> <p>Group individual operation counts into broader categories.</p> <p>Counts are summed into the following groups:</p> <p>Comparisons</p> <ul> <li><code>cmp</code>      = <code>lt</code> + <code>le</code> + <code>eq</code> + <code>ne</code> + <code>gt</code> + <code>ge</code></li> </ul> <p>Unary operations are left as they are</p> <ul> <li><code>pos</code>, <code>neg</code>, <code>abs</code>, <code>invert</code></li> </ul> <p>Arithmetic</p> <ul> <li><code>add</code>      = <code>add</code> + <code>iadd</code> + <code>radd</code></li> <li><code>sub</code>      = <code>sub</code> + <code>isub</code> + <code>rsub</code></li> <li><code>mul</code>      = <code>mul</code> + <code>imul</code> + <code>rmul</code></li> <li><code>truediv</code>  = <code>truediv</code> + <code>itruediv</code> + <code>rtruediv</code></li> <li><code>floordiv</code> = <code>floordiv</code> + <code>ifloordiv</code> + <code>rfloordiv</code></li> <li><code>mod</code>      = <code>mod</code> + <code>imod</code> + <code>rmod</code></li> <li><code>pow</code>      = <code>pow</code> + <code>ipow</code> + <code>rpow</code></li> <li><code>divmod</code>   = <code>divmod</code> + <code>rdivmod</code></li> </ul> <p>Bitwise</p> <ul> <li><code>and</code>      = <code>and</code> + <code>iand</code> + <code>rand</code></li> <li><code>or</code>       = <code>or</code> + <code>ior</code> + <code>ror</code></li> <li><code>xor</code>      = <code>xor</code> + <code>ixor</code> + <code>rxor</code></li> <li><code>lshift</code>   = <code>lshift</code> + <code>ilshift</code> + <code>rlshift</code></li> <li><code>rshift</code>   = <code>rshift</code> + <code>irshift</code> + <code>rrshift</code></li> </ul> <p>Unrecognised counts are copied unchanged.</p> <p>Parameters</p> <p><code>counter</code>: Counter[str]</p> <p>A mapping from operation names to the number of times each operation has been executed.</p> <p>Returns</p> <p><code>Counter[str]</code></p> <p>A new counter where related operations are summed together under a single key.</p> </li> </ul>"},{"location":"operationcounter/#context-manager-count_ops","title":"Context manager: <code>count_ops()</code>","text":"<p>Context manager that yields the operation counter. The <code>OperationCounter.counter</code> is cleared on entry and yielded to the caller. <pre><code>with count_ops() as counts:\n    # run algorithm with `OperationCounter`-wrapped inputs\n    ...\n    print(counts)\n</code></pre></p>"}]}